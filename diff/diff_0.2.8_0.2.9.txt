diff --git a/extension/chrome/content/container.js b/extension/chrome/content/container.js
index 309f4f6..0c8c10a 100644
--- a/extension/chrome/content/container.js
+++ b/extension/chrome/content/container.js
@@ -98,7 +98,7 @@ let FireIEContainer = {};
 
     let container = E('container');
 
-    if (E('fireie-object'))
+    if (E(Utils.containerPluginId))
     {
       unregisterEventHandler();
     }
@@ -152,6 +152,7 @@ let FireIEContainer = {};
     window.addEventListener("IETitleChanged", onIETitleChanged, false);
     window.addEventListener("CloseIETab", onCloseIETab, false);
     window.addEventListener("IEDocumentComplete", onIEDocumentComplete, false);
+    window.addEventListener("IEProgressChanged", onIEProgressChange, false);
     E(Utils.containerPluginId).addEventListener("focus", onPluginFocus, false);
     E(Utils.statusBarId).addEventListener("SetStatusText", onSetStatusText, false);
     E(Utils.statusBarId).addEventListener("mousemove", onStatusMouseMove, false);
@@ -164,6 +165,7 @@ let FireIEContainer = {};
     window.removeEventListener("IETitleChanged", onIETitleChanged, false);
     window.removeEventListener("CloseIETab", onCloseIETab, false);
     window.removeEventListener("IEDocumentComplete", onIEDocumentComplete, false);
+    window.removeEventListener("IEProgressChanged", onIEProgressChange, false);
     E(Utils.containerPluginId).removeEventListener("focus", onPluginFocus, false);
     E(Utils.statusBarId).removeEventListener("SetStatusText", onSetStatusText, false);
     E(Utils.statusBarId).removeEventListener("mousemove", onStatusMouseMove, false);
@@ -192,7 +194,38 @@ let FireIEContainer = {};
   /** Handler for the IE document complete event */
 
   function onIEDocumentComplete(event)
-  { /** Sets the page favicon */
+  {
+    syncURL();
+    syncFavicon();
+  }
+  
+  function onIEProgressChange(event)
+  {
+    syncURL();
+  }
+  
+  /** sync recorded url when IE engine navigates to another location */
+  function syncURL()
+  {
+    let po = E(Utils.containerPluginId);
+    if (!po) return;
+    
+    let url = po.URL;
+    if (!url) return;
+    
+    url = Utils.toContainerUrl(url);
+    if (window.location.href != url)
+    {
+      // HTML5 history manipulation,
+      // see http://spoiledmilk.com/blog/html5-changing-the-browser-url-without-refreshing-page
+      if (window.history)
+        window.history.replaceState("", document.title, url);
+    }
+  }
+  
+  /** Sets the page favicon */
+  function syncFavicon()
+  {
     let po = E(Utils.containerPluginId);
     if (po)
     {
@@ -203,7 +236,9 @@ let FireIEContainer = {};
       }
     }
   }
-
+  
+  let statusHideTimeout = 0;
+  
   /** Sets the status text */
   function onSetStatusText(event)
   {
@@ -211,6 +246,7 @@ let FireIEContainer = {};
     let statustext = event.getData("statusText");
     if (typeof(statustext) == "undefined")
       statustext = "";
+    let prevent = event.getData("preventFlash");
     let pretext = "";
     if (statusbar.firstChild)
     {
@@ -220,20 +256,25 @@ let FireIEContainer = {};
     }
     if (statustext == pretext) return;
     
+    if (!prevent)
+    {
+      statusbar.className = "noprevent";
+    }
+    
     if (statustext.length > 0)
     {
       statusbar.appendChild(document.createTextNode(statustext));
       statusbar.hidden = false;
     }
     
-    if (statusbar.dataset.hideTimeout)
-      window.clearTimeout(statusbar.dataset.hideTimeout);
+    if (statusHideTimeout)
+      window.clearTimeout(statusHideTimeout);
     if (statusbar.hidden == false && !isLinkStatus(statustext))
     {
-      statusbar.dataset.hideTimeout = window.setTimeout(function()
+      statusHideTimeout = window.setTimeout(function()
       {
         hideStatusBar();
-      }, statustext.length > 0 ? 5000 : 1000);
+      }, statustext.length > 0 ? 5000 : (prevent ? 1000 : 0));
     }
   }
 
@@ -289,9 +330,9 @@ let FireIEContainer = {};
     let statusbar = E(Utils.statusBarId);
     statusbar.hidden = true;
     statusbar.setAttribute("mirrored", "false");
-    if (statusbar.dataset.hideTimeout)
-      window.clearTimeout(statusbar.dataset.hideTimeout);
-    statusbar.dataset.hideTimeout = 0;    
+    if (statusHideTimeout)
+      window.clearTimeout(statusHideTimeout);
+    statusHideTimeout = 0;    
   }
 
   let validProtocolSet = (function(list)
@@ -301,7 +342,7 @@ let FireIEContainer = {};
       ret[value] = true;
     })
     return ret;
-  })(["http", "https", "ftp", "javscript", "file", "about", "mailto", "data", "rtsp", "telnet", "thunder", "ed2k", "magnet"]);
+  })(["http", "https", "ftp", "javascript", "file", "about", "mailto", "data", "rtsp", "telnet", "thunder", "ed2k", "magnet"]);
 
   function isLinkStatus(status)
   {
@@ -332,7 +373,7 @@ let FireIEContainer = {};
   FireIEContainer.removeNavigateParams = removeNavigateParams;
   FireIEContainer.getZoomLevel = function()
   {
-    let win = Utils.getChromeWindow();
+    let win = Utils.getChromeWindowFrom(window);
     if (win && win.gFireIE)
     {
       return win.gFireIE.getZoomLevel();
diff --git a/extension/chrome/content/firstRun.xul b/extension/chrome/content/firstRun.xul
index 9e9f165..b47934c 100644
--- a/extension/chrome/content/firstRun.xul
+++ b/extension/chrome/content/firstRun.xul
@@ -5,7 +5,6 @@
    - http://mozilla.org/MPL/2.0/. -->
 
 <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
-<?xml-stylesheet href="chrome://fireie/skin/firstRun.css" type="text/css"?>
 
 <!DOCTYPE dialog SYSTEM "chrome://fireie/locale/firstRun.dtd">
 
diff --git a/extension/chrome/content/options.js b/extension/chrome/content/options.js
deleted file mode 100644
index a62bc1c..0000000
--- a/extension/chrome/content/options.js
+++ /dev/null
@@ -1,429 +0,0 @@
-/*
-This file is part of Fire-IE.
-
-Fire-IE is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Fire-IE is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Fire-IE.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-/**
- * @namespace
- */
-
-Cu.import(baseURL.spec + "AppIntegration.jsm");
-Cu.import(baseURL.spec + "GesturePrefObserver.jsm");
-
-if (typeof(Options) == "undefined")
-{
-  var Options = {};
-}
-
-Options.export = function()
-{
-  let aOld = Options._getAllOptions(false);
-  Options.apply(true);
-  let aCurrent = Options._getAllOptions(false);
-  if (aCurrent) Options._saveToFile(aCurrent);
-  Options._setAllOptions(aOld);
-}
-
-Options.import = function()
-{
-  let aOld = Options._getAllOptions(false);
-  let[result, aList] = Options._loadFromFile();
-  if (result)
-  {
-    if (aList)
-    {
-      Options._setAllOptions(aList);
-      Options.initDialog();
-      Options._setAllOptions(aOld);
-      Options.updateApplyButton(true);
-    }
-    else
-    {
-      alert(Utils.getString("fireie.options.import.error"));
-    }
-  }
-}
-
-Options.restoreDefaultSettings = function()
-{
-  let aOld = Options._getAllOptions(false);
-  let aDefault = Options._getAllOptions(true);
-  Options._setAllOptions(aDefault);
-  Options.initDialog();
-  Options._setAllOptions(aOld);
-  Options.updateApplyButton(true);
-}
-
-// Apply options
-Options.apply = function(quiet)
-{
-  let requiresRestart = false;
-
-  //general
-  Prefs.handleUrlBar = E("handleurl").checked;
-  Prefs.autoswitch_enabled = !E("disableAutoSwitch").checked;
-  let newKey = E("shortcut-key").value;
-  if (Prefs.shortcutEnabled && Prefs.shortcut_key != newKey)
-  {
-    requiresRestart = true;
-  }
-  Prefs.shortcut_key = newKey;
-  let newModifiers = E("shortcut-modifiers").value;
-  if (Prefs.shortcutEnabled && Prefs.shortcut_modifiers != newModifiers)
-  {
-    requiresRestart = true;
-  }
-  Prefs.shortcut_modifiers = newModifiers;
-  let newEnabled = E("shortcutEnabled").checked;
-  if (Prefs.shortcutEnabled != newEnabled)
-  {
-    requiresRestart = true;
-    Prefs.shortcutEnabled = E("shortcutEnabled").checked;
-  }
-  Prefs.privatebrowsingwarning = E("privatebrowsingwarning").checked;
-  Prefs.showUrlBarLabel = (E("iconDisplay").value == "iconAndText");
-  Prefs.hideUrlBarButton = (E("iconDisplay").value == "iconHidden");
-  Prefs.showTooltipText = E("showTooltipText").checked;
-  Prefs.showStatusText = E("showStatusText").checked;
-  Prefs.forceMGSupport = E("forceMGSupport").checked;
-  
-  // IE compatibility mode
-  let newMode = "ie7mode";
-  let iemode = E("iemode");
-  if (iemode)
-  {
-    newMode = iemode.value;
-  }
-  if (Prefs.compatMode != newMode)
-  {
-    requiresRestart = true;
-    Prefs.compatMode = newMode;
-    Options.applyIECompatMode();
-  }
-
-  //update UI
-  Options.updateApplyButton(false);
-
-  //notify of restart requirement
-  if (requiresRestart && !quiet)
-  {
-    alert(Utils.getString("fireie.options.alert.restart"));
-  }
-}
-
-Options.applyIECompatMode = function()
-{
-  let mode = Services.prefs.getCharPref("extensions.fireie.compatMode");
-  let value = 7000;
-  switch (mode)
-  {
-  case 'ie7mode':
-    value = 7000;
-    break;
-  case 'ie8mode':
-    value = 8000;
-    break;
-  case 'ie9mode':
-    value = 9000;
-    break;
-  default:
-    value = 7000;
-    break;
-  }
-  
-  let wrk = Components.classes["@mozilla.org/windows-registry-key;1"].createInstance(Components.interfaces.nsIWindowsRegKey);
-  try
-  {
-	wrk.create(wrk.ROOT_KEY_CURRENT_USER, "SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BROWSER_EMULATION", wrk.ACCESS_ALL);
-	wrk.writeIntValue("firefox.exe", value);
-	wrk.close();
-  }
-  catch (e)
-  {
-	Utils.ERROR(e);
-  }
-}
-
-// Get IE's main version number
-Options.getIEMainVersion = function()
-{
-  let wrk = Components.classes["@mozilla.org/windows-registry-key;1"].createInstance(Components.interfaces.nsIWindowsRegKey);
-  let versionString = "0";
-  try
-  {
-	wrk.create(wrk.ROOT_KEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Internet Explorer", wrk.ACCESS_READ);
-    versionString = wrk.readStringValue("version");
-    wrk.close();
-  }
-  catch (e)
-  {
-    Utils.ERROR(e);
-  }  
-  return parseInt(versionString);
-}
-
-Options.updateIEModeTab = function()
-{
-  let mainIEVersion = Options.getIEMainVersion();
-  // Do not show this tab if IE8 or higher is not detected,
-  // since IE7 or lower does not support compatible modes
-  if (mainIEVersion < 8)
-  {
-    return;
-  }
-  switch (mainIEVersion)
-  {
-  case 9:
-    document.getElementById("ie9mode-radio").hidden = false;
-  case 8:
-    document.getElementById("ie8mode-radio").hidden = false;
-    document.getElementById("ie7mode-radio").hidden = false;
-    break;
-  }
-  document.getElementById("iemode-tab").hidden = false;
-  let mode = Prefs.compatMode;
-  document.getElementById("iemode").value = mode;
-}
-
-Options.initDialog = function()
-{
-  // options for general features
-  E("handleurl").checked = Prefs.handleUrlBar;
-  E("disableAutoSwitch").checked = !Prefs.autoswitch_enabled;
-  E("shortcut-modifiers").value = Prefs.shortcut_modifiers;
-  E("shortcut-key").value = Prefs.shortcut_key;
-  E("shortcutEnabled").checked = Prefs.shortcutEnabled;
-  E("privatebrowsingwarning").checked = Prefs.privatebrowsingwarning;
-  E("iconDisplay").value = Prefs.hideUrlBarButton ? "iconHidden" : (Prefs.showUrlBarLabel ? "iconAndText" : "iconOnly");
-  E("showTooltipText").checked = Prefs.showTooltipText;
-  E("showStatusText").checked = Prefs.showStatusText;
-  E("forceMGSupport").checked = Prefs.forceMGSupport;
-
-  // hide "showStatusText" if we don't handle status messages ourselves
-  let ifHide = !AppIntegration.shouldShowStatusOurselves();
-  E("statusBarGroup").hidden = ifHide;
-
-  // disable MGS checkbox if we already detected some gesture extension
-  //E("integration-tab").hidden = GesturePrefObserver.hasGestureExtension();
-  if (GesturePrefObserver.hasGestureExtension())
-  {
-    E("forceMGSupport").disabled = true;
-  }
-  else
-  {
-    E("alreadyEnabledMGSupportLabel").hidden = true;
-  }
-
-  // updateStatus
-  Options.updateApplyButton(false);
-  Options.handleShortcutEnabled();
-
-  // IE Compatibility Mode
-  Options.updateIEModeTab();
-}
-
-Options.setIconDisplayValue = function(value)
-{
-  E("iconDisplay").value = value;
-  this.updateApplyButton(true);
-}
-
-Options.updateApplyButton = function(e)
-{
-  document.getElementById("myApply").disabled = !e;
-}
-
-Options.handleShortcutEnabled = function(e)
-{
-  let disable = !E("shortcutEnabled").checked;
-  E("shortcut-modifiers").disabled = disable;
-  E("shortcut-plus").disabled = disable;
-  E("shortcut-key").disabled = disable;
-}
-
-Options.init = function()
-{
-  function addEventListenerByTagName(tag, type, listener)
-  {
-    let objs = document.getElementsByTagName(tag);
-    for (let i = 0; i < objs.length; i++)
-    {
-      objs[i].addEventListener(type, listener, false);
-    }
-  }
-  Options.initDialog();
-  addEventListenerByTagName("checkbox", "command", Options.updateApplyButton);
-  addEventListenerByTagName("radio", "command", Options.updateApplyButton);
-  addEventListenerByTagName("menulist", "command", Options.updateApplyButton);
-  E("shortcutEnabled").addEventListener('command', Options.handleShortcutEnabled);
-}
-
-Options.close = function()
-{
-  let isModified = !document.getElementById("myApply").disabled;
-  if (isModified)
-  {
-    if (confirm(Utils.getString("fireie.options.alert.modified")))
-    {
-      Options.apply(true);
-    }
-  }
-}
-
-Options._saveToFile = function(aList)
-{
-  let fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
-  let stream = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
-  let converter = Components.classes["@mozilla.org/intl/converter-output-stream;1"].createInstance(Components.interfaces.nsIConverterOutputStream);
-
-  fp.init(window, null, fp.modeSave);
-  fp.defaultExtension = "txt";
-  fp.defaultString = "FireIEPref";
-  fp.appendFilters(fp.ruleText);
-
-  if (fp.show() != fp.returnCancel)
-  {
-    try
-    {
-      if (fp.file.exists()) fp.file.remove(true);
-      fp.file.create(fp.file.NORMAL_FILE_TYPE, 0666);
-      stream.init(fp.file, 0x02, 0x200, null);
-      converter.init(stream, "UTF-8", 0, 0x0000);
-
-      for (var i = 0; i < aList.length; i++)
-      {
-        aList[i] = aList[i] + "\n";
-        converter.writeString(aList[i]);
-      }
-    }
-    finally
-    {
-      converter.close();
-      stream.close();
-    }
-  }
-}
-
-Options._loadFromFile = function()
-{
-  let fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
-  let stream = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
-  let converter = Components.classes["@mozilla.org/intl/converter-input-stream;1"].createInstance(Components.interfaces.nsIConverterInputStream);
-
-  fp.init(window, null, fp.modeOpen);
-  fp.defaultExtension = "txt";
-  fp.appendFilters(fp.ruleText);
-
-  if (fp.show() != fp.returnCancel)
-  {
-    try
-    {
-      let input = {};
-      stream.init(fp.file, 0x01, 0444, null);
-      converter.init(stream, "UTF-8", 0, 0x0000);
-      converter.readString(stream.available(), input);
-      let linebreak = input.value.match(/(((\n+)|(\r+))+)/m)[1];
-      return [true, input.value.split(linebreak)];
-    }
-    finally
-    {
-      converter.close();
-      stream.close();
-    }
-  }
-  return [false, null];
-}
-
-Options._getAllOptions = function(isDefault)
-{
-  let prefix = "extensions.fireie.";
-  let prefs = (isDefault ? Services.prefs.getDefaultBranch("") : Services.prefs.getBranch(""));
-  let preflist = prefs.getChildList(prefix, {});
-
-  let aList = ["FireIEPref"];
-  for (var i = 0; i < preflist.length; i++)
-  {
-    try
-    {
-      let value = null;
-      switch (prefs.getPrefType(preflist[i]))
-      {
-      case prefs.PREF_BOOL:
-        value = prefs.getBoolPref(preflist[i]);
-        break;
-      case prefs.PREF_INT:
-        value = prefs.getIntPref(preflist[i]);
-        break;
-      case prefs.PREF_STRING:
-        value = prefs.getComplexValue(preflist[i], Components.interfaces.nsISupportsString).data;
-        break;
-      }
-      aList.push(preflist[i] + "=" + value);
-    }
-    catch (e)
-    {
-      Utils.ERROR(e);
-    }
-  }
-  return aList;
-}
-
-Options._setAllOptions = function(aList)
-{
-  if (!aList) return;
-  if (aList.length == 0) return;
-  if (aList[0] != "FireIEPref") return;
-
-  let prefs = Services.prefs.getBranch("");
-
-  let aPrefs = [];
-  for (let i = 1; i < aList.length; i++)
-  {
-    let index = aList[i].indexOf("=");
-    if (index > 0)
-    {
-      var name = aList[i].substring(0, index);
-      var value = aList[i].substring(index + 1, aList[i].length);
-      aPrefs.push([name, value]);
-    }
-  }
-  for (let i = 0; i < aPrefs.length; i++)
-  {
-    try
-    {
-      let name = aPrefs[i][0];
-      let value = aPrefs[i][1];
-      switch (prefs.getPrefType(name))
-      {
-      case prefs.PREF_BOOL:
-        prefs.setBoolPref(name, /true/i.test(value));
-        break;
-      case prefs.PREF_INT:
-        prefs.setIntPref(name, value);
-        break;
-      case prefs.PREF_STRING:
-        if (value.indexOf('"') == 0) value = value.substring(1, value.length - 1);
-        let sString = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
-        sString.data = value;
-        prefs.setComplexValue(name, Components.interfaces.nsISupportsString, sString);
-        break;
-      }
-    }
-    catch (e)
-    {
-      Utils.ERROR(e);
-    }
-  }
-}
diff --git a/extension/chrome/content/options.xul b/extension/chrome/content/options.xul
deleted file mode 100644
index bb13cb0..0000000
--- a/extension/chrome/content/options.xul
+++ /dev/null
@@ -1,192 +0,0 @@
-<?xml version="1.0"?>
-<!--
--->
-<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
-<?xml-stylesheet href="chrome://fireie/skin/options.css" type="text/css"?>
-<!DOCTYPE window SYSTEM "chrome://fireie/locale/fireie.dtd">
-<dialog id="fireie-options"
-xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
-autosize="true" resizable="no" persist="screenX screenY"
-buttons="accept,cancel,extra1,extra2" onload="Options.init();"
-onclose="Options.close();"
-ondialogaccept="Options.apply(false);"
-ondialogextra1="Options.apply(false);"
-title="&fireie.options.title;"
-windowtype="fireie:options">
-  <script type="application/x-javascript" src="utils.js"/>
-  <script type="application/x-javascript" src="options.js" />
-  <tabbox>
-    <tabs>
-      <tab label="&fireie.options.general.tab;" />
-      <tab label="&fireie.options.ui.tab;" />
-      <tab id="integration-tab" label="&fireie.options.integration.tab;" />
-      <tab id="iemode-tab" label="&fireie.options.iecompat.tab;"
-      hidden="true" />
-    </tabs>    
-    <tabpanels>
-      <!-- General Tab -->
-      <tabpanel>
-        <vbox flex="1">
-          <groupbox>
-            <caption label="&fireie.options.switch.caption;" />
-            <vbox>
-              <checkbox label="&fireie.options.switch.handleurl;"
-              id="handleurl" />
-              <checkbox label="&fireie.options.switch.disableAutoSwitch;" id="disableAutoSwitch" />
-            </vbox>
-          </groupbox>
-          <!-- Sets Shortcut key -->
-          <groupbox id="shortcut">
-            <caption label="&fireie.options.shorcut.caption;" />
-            <hbox>
-              <checkbox label="&fireie.options.shorcut.enable;" id="shortcutEnabled" />
-              <menulist id="shortcut-modifiers">
-                <menupopup>
-                  <menuitem value="alt" label="Alt" />
-                  <menuitem value="control" label="Ctrl" />
-                  <menuitem value="control shift" label="Ctrl + Shift" />
-                  <menuitem value="control alt" label="Ctrl + Alt" />
-                  <menuitem value="alt shift" label="Alt + Shift" />
-                </menupopup>
-              </menulist>
-              <label id="shortcut-plus">+</label>
-              <menulist id="shortcut-key">
-                <menupopup>
-                  <menuitem value="A" label="A" />
-                  <menuitem value="B" label="B" />
-                  <menuitem value="C" label="C" />
-                  <menuitem value="D" label="D" />
-                  <menuitem value="E" label="E" />
-                  <menuitem value="F" label="F" />
-                  <menuitem value="G" label="G" />
-                  <menuitem value="H" label="H" />
-                  <menuitem value="I" label="I" />
-                  <menuitem value="J" label="J" />
-                  <menuitem value="K" label="K" />
-                  <menuitem value="L" label="L" />
-                  <menuitem value="M" label="M" />
-                  <menuitem value="N" label="N" />
-                  <menuitem value="O" label="O" />
-                  <menuitem value="P" label="P" />
-                  <menuitem value="Q" label="Q" />
-                  <menuitem value="R" label="R" />
-                  <menuitem value="S" label="S" />
-                  <menuitem value="T" label="T" />
-                  <menuitem value="U" label="U" />
-                  <menuitem value="V" label="V" />
-                  <menuitem value="W" label="W" />
-                  <menuitem value="X" label="X" />
-                  <menuitem value="Y" label="Y" />
-                  <menuitem value="Z" label="Z" />
-                  <menuitem value="0" label="0" />
-                  <menuitem value="1" label="1" />
-                  <menuitem value="2" label="2" />
-                  <menuitem value="3" label="3" />
-                  <menuitem value="4" label="4" />
-                  <menuitem value="5" label="5" />
-                  <menuitem value="6" label="6" />
-                  <menuitem value="7" label="7" />
-                  <menuitem value="8" label="8" />
-                  <menuitem value="9" label="9" />
-                </menupopup>
-              </menulist>
-            </hbox>
-            <hbox>
-              <label class="descr" value="&fireie.options.restart.descr;" />
-            </hbox>
-          </groupbox>
-          <groupbox>
-            <caption label="&fireie.options.private.caption;"/>
-            <label class="descr">&fireie.options.private.descr;</label>
-            <checkbox id="privatebrowsingwarning" label="&fireie.options.private.privatebrowsingwarning;" class="indent" />
-          </groupbox>
-        </vbox>
-      </tabpanel>
-      <!-- User Interface -->
-      <tabpanel>
-        <vbox flex="1">
-          <groupbox>
-            <caption label="&fireie.options.ui.urlBarButtonCaption;" />
-            <vbox>
-              <vbox>
-                <label>&fireie.options.ui.iconDisplayLabel;</label>
-                <radiogroup id="iconDisplay" class="indent">
-                  <hbox align="center">
-                    <radio id="iconHidden-radio" label="&fireie.options.ui.iconHidden;" value="iconHidden" />
-                    <spacer flex="1"/>
-                    <image class="icon-hidden" width="150" height="24" onclick="Options.setIconDisplayValue('iconHidden')" />
-                  </hbox>
-                  <hbox align="center">
-                    <radio id="iconOnly-radio" label="&fireie.options.ui.iconOnly;" value="iconOnly" />
-                    <spacer flex="1"/>
-                    <image class="icon-only" width="150" height="24" onclick="Options.setIconDisplayValue('iconOnly')" />
-                  </hbox>
-                  <hbox align="center">
-                    <radio id="iconAndText-radio" label="&fireie.options.ui.iconAndText;" value="iconAndText" />
-                    <spacer flex="1"/>
-                    <image class="icon-and-text" width="150" height="24" onclick="Options.setIconDisplayValue('iconAndText')" style="list-style-image: url('&fireie.options.ui.buttonStylesURL;');" />
-                  </hbox>
-                </radiogroup>
-              </vbox>
-              <vbox>
-                <label id="tooltipLabel" style="margin-top:10px;">&fireie.options.ui.tooltipLabel;</label>
-                <checkbox label="&fireie.options.ui.showTooltipText;" id="showTooltipText" class="indent" />
-              </vbox>
-            </vbox>
-          </groupbox>
-          <groupbox id="statusBarGroup">
-            <caption label="&fireie.options.ui.statusBarCaption;" />
-            <vbox>
-              <checkbox label="&fireie.options.ui.showStatusText;" id="showStatusText" />
-            </vbox>
-          </groupbox>
-        </vbox>
-      </tabpanel>
-      <!-- Integration -->
-      <tabpanel>
-        <vbox flex="1">
-          <groupbox>
-            <caption label="&fireie.options.integration.mgCaption;" />
-            <label class="descr">&fireie.options.integration.mgDescr;</label>
-            <checkbox id="forceMGSupport" label="&fireie.options.integration.forceMGSupport;" class="indent" />
-            <label id="alreadyEnabledMGSupportLabel" style="color: green;">&fireie.options.integration.alreadyEnabledMGSupport;</label>
-          </groupbox>
-        </vbox>  
-      </tabpanel>
-      <!-- IE Compatibility Mode -->
-      <tabpanel>
-        <vbox flex="1">
-          <radiogroup id="iemode">
-            <radio id="ie7mode-radio" label="&fireie.options.iecompat.ie7;"
-            hidden="true" value="ie7mode" />
-            <radio id="ie8mode-radio" label="&fireie.options.iecompat.ie8;"
-            hidden="true" value="ie8mode" />
-            <radio id="ie9mode-radio" label="&fireie.options.iecompat.ie9;"
-            hidden="true" value="ie9mode" />
-          </radiogroup>
-          <label class="descr" style="margin-top:20px;">
-          &fireie.options.restart.descr;</label>
-        </vbox>
-      </tabpanel>
-    </tabpanels>
-  </tabbox>
-  <hbox>
-    <button dlgtype="extra2" id="mySettingManager" type="menu"
-    label="&fireie.options.manager;" popup="options">
-      <menupopup>
-        <menuitem id="import" label="&fireie.options.import;"
-        oncommand="Options.import();" />
-        <menuitem id="export" label="&fireie.options.export;"
-        oncommand="Options.export();" />
-        <menuseparator />
-        <menuitem id="default" label="&fireie.options.default;"
-        oncommand="Options.restoreDefaultSettings();" />
-      </menupopup>
-    </button>
-    <spacer flex="1" />
-    <button dlgtype="accept" id="myAccept" />
-    <button dlgtype="extra1" id="myApply" label="&fireie.options.apply;" />
-    <button dlgtype="cancel" id="myCancel" />
-  </hbox>
-  <popupset></popupset>
-</dialog>
diff --git a/extension/chrome/content/overlay.js b/extension/chrome/content/overlay.js
index a9775f8..3fb0ccf 100644
--- a/extension/chrome/content/overlay.js
+++ b/extension/chrome/content/overlay.js
@@ -68,18 +68,6 @@ var gFireIE = null;
         event.stopPropagation();
         return RET.shouldReturn();
       }
-      // maybe it's a utils plugin
-      if (doc.location.href == "chrome://browser/content/browser.xul")
-      {
-        // ok, play the utils plugin
-        if (!objLoadingContent.activated)
-        {
-          plugin.playPlugin();
-          gFireIE.updateInterface();
-        }
-        event.stopPropagation();
-        return RET.shouldReturn();
-      }
       // let gPluginHandler do the rest of the work
     }
   };
@@ -481,21 +469,27 @@ var gFireIE = null;
   }
   
   // save space by reusing function handles
-  let currentURIGetter = function()
+  let currentURIGetter = function(uri)
   {
-    let uri = gFireIE.getURI(this);
-    if (uri)
+    if (Utils.startsWith(uri.spec, Utils.containerUrl))
     {
-      if (this.FireIE_bUseRealURI)
-        uri = makeURI(Utils.fromContainerUrl(uri.spec));
-      return RET.shouldReturn(uri);
+      let pluginObject = gFireIE.getContainerPluginFromBrowser(this);
+      if (pluginObject)
+      {
+        let pluginURL = pluginObject.URL;
+        if (pluginURL)
+        {
+          let url = this.FireIE_bUseRealURI ? pluginURL : (Utils.containerUrl + encodeURI(pluginURL));
+          return RET.modifyValue(Utils.makeURI(url));
+        }
+      }
     }
   };
   let sessionHistoryGetter = function()
   {
     let history = this.webNavigation.sessionHistory;
-    let uri = gFireIE.getURI(this);
-    if (uri)
+    let uri = this.FireIE_hooked ? this.currentURI : gFireIE.getURI(this);
+    if (uri && Utils.startsWith(uri.spec, Utils.containerUrl))
     {
       let entry = history.getEntryAtIndex(history.index, false);
       if (entry.URI.spec != uri.spec)
@@ -511,7 +505,7 @@ var gFireIE = null;
     if (aBrowser.localName != "browser") aBrowser = aBrowser.getElementsByTagNameNS(kXULNS, "browser")[0];
     if (aBrowser.FireIE_hooked) return;
     // hook aBrowser.currentURI, Let firefox know the new URL after navigating inside the IE engine
-    HM.hookProp(aBrowser, "currentURI", currentURIGetter);
+    HM.hookProp(aBrowser, "currentURI", null, null, currentURIGetter);
     // hook aBrowser.sessionHistory
     HM.hookProp(aBrowser, "sessionHistory", sessionHistoryGetter);
     aBrowser.FireIE_hooked = true;
@@ -544,6 +538,7 @@ var gFireIE = null;
       if (isIEEngine)
       {
         arguments[0] = Utils.fromContainerUrl(arguments[0]);
+        if (/^file:\/\/.*/.test(arguments[0])) arguments[0] = encodeURI(arguments[0]);
         return RET.modifyArguments(arguments);
       }
     });
diff --git a/extension/chrome/content/overlay.xul b/extension/chrome/content/overlay.xul
index 1a3e2be..9481712 100644
--- a/extension/chrome/content/overlay.xul
+++ b/extension/chrome/content/overlay.xul
@@ -30,7 +30,8 @@ xmlns:html="http://www.w3.org/1999/xhtml">
       <tooltip id="fireie-urlbar-switch-tooltip" noautohide="true"
       orient="vertical" position="before_start" style="padding:2px;">
         <vbox>
-          <label value="&fireie.urlbar.switch.tooltip1;" style="margin:2px;" />
+          <label id="fireie-urlbar-switch-tooltip1" value="&fireie.urlbar.switch.tooltip1;" style="margin:2px;" />
+          <label id="fireie-urlbar-switch-tooltip1-disabled" value="&fireie.urlbar.switch.tooltip1.disabled;" style="margin:2px;" />
           <label id="fireie-urlbar-switch-tooltip2" style="margin:2px;" />
           <label value="&fireie.urlbar.switch.tooltip3;" style="margin:2px;" />
         </vbox>
diff --git a/extension/chrome/content/pluginNotFound.js b/extension/chrome/content/pluginNotFound.js
new file mode 100644
index 0000000..dd82153
--- /dev/null
+++ b/extension/chrome/content/pluginNotFound.js
@@ -0,0 +1,55 @@
+/*
+This file is part of Fire-IE.
+
+Fire-IE is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Fire-IE is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Fire-IE.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+function init()
+{
+  generateLinkText(E("visitHomepage"));
+
+  let element = E("correctVersion");
+  let template = element.getAttribute("_textTemplate");
+  element.textContent = template.replace(/\[bit\]/, Utils.is64bit ? "64" : "32");
+}
+
+function generateLinkText(element)
+{
+  let template = element.getAttribute("_textTemplate");
+  let url = element.querySelector("label.text-link").getAttribute("_url");
+  template = template.replace(/\[host\]/, Utils.getHostname(url));
+  
+  let beforeLink, linkText, afterLink;
+  if (/(.*)\[link\](.*)\[\/link\](.*)/.test(template))
+    [beforeLink, linkText, afterLink] = [RegExp.$1, RegExp.$2, RegExp.$3];
+  else
+    [beforeLink, linkText, afterLink] = ["", template, ""];
+
+  while (element.firstChild && element.firstChild.nodeType != Node.ELEMENT_NODE)
+    element.removeChild(element.firstChild);
+  while (element.lastChild && element.lastChild.nodeType != Node.ELEMENT_NODE)
+    element.removeChild(element.lastChild);
+  if (!element.firstChild)
+    return;
+
+  element.firstChild.textContent = linkText;
+  element.insertBefore(document.createTextNode(beforeLink), element.firstChild);
+  element.appendChild(document.createTextNode(afterLink));
+}
+
+function visitHomepage(element)
+{
+  Utils.loadInBrowser(element.getAttribute("_url"));
+  document.documentElement.acceptDialog();
+}
diff --git a/extension/chrome/content/pluginNotFound.xul b/extension/chrome/content/pluginNotFound.xul
new file mode 100644
index 0000000..201d96f
--- /dev/null
+++ b/extension/chrome/content/pluginNotFound.xul
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+
+<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
+
+<!DOCTYPE dialog SYSTEM "chrome://fireie/locale/pluginNotFound.dtd">
+
+<dialog
+  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+  buttons="accept"
+  title="&dialog.title;"
+  id="fireiePluginNotFound"
+  windowtype="fireie:pluginNotFound"
+  onload="init()">
+
+  <script type="application/x-javascript;version=1.7" src="utils.js"/>
+  <script type="application/x-javascript;version=1.7" src="pluginNotFound.js"/>
+
+  <vbox>
+    <description>&pluginNotFound1;</description>
+    <description>&pluginNotFound2;</description>
+    <description id="correctVersion" _textTemplate="&correctVersion;"></description>
+    <description id="visitHomepage" _textTemplate="&visitHomepage;">
+      <label class="text-link" _url="&homepage;" onclick="visitHomepage(this);"/>
+    </description>
+  </vbox>
+</dialog>
diff --git a/extension/chrome/content/rules-backup.js b/extension/chrome/content/rules-backup.js
index 2d99e51..0f608ff 100644
--- a/extension/chrome/content/rules-backup.js
+++ b/extension/chrome/content/rules-backup.js
@@ -140,7 +140,7 @@ var Backup =
       lines.push(line.value);
     stream.close();
 
-    if (lines.length < 2 || lines[0] != "# Adblock Plus preferences" || !/version=(\d+)/.test(lines[1]))
+    if (lines.length < 2 || lines[0] != "# Fire-IE preferences" || !/version=(\d+)/.test(lines[1]))
     {
       Utils.alert(window, E("backupButton").getAttribute("_restoreError"), E("backupButton").getAttribute("_restoreDialogTitle"));
       return;
@@ -177,7 +177,7 @@ var Backup =
       lines.push(line.value);
     stream.close();
 
-    if (!lines.length || !/\[Adblock(?:\s*Plus\s*([\d\.]+)?)?\]/i.test(lines[0]))
+    if (!lines.length || !/\[Fire-IE(?:\s*([\d\.]+(?:(?:a|alpha|b|beta|pre|rc)\d*)?)?)?\]/i.test(lines[0]))
     {
       Utils.alert(window, E("backupButton").getAttribute("_restoreError"), E("backupButton").getAttribute("_restoreDialogTitle"));
       return;
@@ -266,7 +266,7 @@ var Backup =
   backupCustomRules: function(/**nsIFile*/ file)
   {
     let subscriptions = RuleStorage.subscriptions.filter(function(s) s instanceof SpecialSubscription);
-    let list = ["[Adblock Plus 2.0]"];
+    let list = ["[Fire-IE %v]".replace(/%v/, Utils.addonVersion)];
     for (let i = 0; i < subscriptions.length; i++)
     {
       let subscription = subscriptions[i];
diff --git a/extension/chrome/locale/en/fireie.dtd b/extension/chrome/locale/en/fireie.dtd
index d0d3491..aec1441 100644
--- a/extension/chrome/locale/en/fireie.dtd
+++ b/extension/chrome/locale/en/fireie.dtd
@@ -1,7 +1,8 @@
 <!ENTITY fireie.switchButton.label "Fire IE">
 
 <!ENTITY fireie.urlbar.switch.tooltip1 "Switch rendering engine">
-<!ENTITY fireie.urlbar.switch.tooltip3 "Right-Click: Show Fire IE Options.">
+<!ENTITY fireie.urlbar.switch.tooltip1.disabled "Cannot switch on this page">
+<!ENTITY fireie.urlbar.switch.tooltip3 "Right-Click: Show Fire IE Options">
 <!ENTITY urlbar.switchRules.label "Switch Rules">
 <!ENTITY internetProperties.lable "IE's Internet Properties">
 <!ENTITY fireie.autoswitch.disable "Disable Auto-switch Everywhere">
diff --git a/extension/chrome/locale/en/pluginNotFound.dtd b/extension/chrome/locale/en/pluginNotFound.dtd
new file mode 100644
index 0000000..52ca5b8
--- /dev/null
+++ b/extension/chrome/locale/en/pluginNotFound.dtd
@@ -0,0 +1,6 @@
+<!ENTITY dialog.title               "Fire IE plugin not loaded">
+<!ENTITY pluginNotFound1            "Fire IE detected that the &quot;Fire IE DLL&quot; plugin is not successfully loaded.">
+<!ENTITY pluginNotFound2            "You may have installed a wrong version of Fire IE.">
+<!ENTITY correctVersion             "According to your configuration, you should use the [bit]-bit version.">
+<!ENTITY homepage                   "http://yxl.github.com/Fire-IE">
+<!ENTITY visitHomepage              "Please visit [link][host][/link] to download and install.">
diff --git a/extension/chrome/locale/zh-CN/fireie.dtd b/extension/chrome/locale/zh-CN/fireie.dtd
index d5b7444..e345754 100644
--- a/extension/chrome/locale/zh-CN/fireie.dtd
+++ b/extension/chrome/locale/zh-CN/fireie.dtd
@@ -1,6 +1,7 @@
 <!ENTITY fireie.switchButton.label "解雇IE">
 
 <!ENTITY fireie.urlbar.switch.tooltip1 "切换浏览模式">
+<!ENTITY fireie.urlbar.switch.tooltip1.disabled "无法在该页面进行切换">
 <!ENTITY fireie.urlbar.switch.tooltip3 "右键点击设置 解雇IE 选项">
 <!ENTITY urlbar.switchRules.label "切换规则">
 <!ENTITY internetProperties.lable "IE的Internet 选项">
diff --git a/extension/chrome/locale/zh-CN/pluginNotFound.dtd b/extension/chrome/locale/zh-CN/pluginNotFound.dtd
new file mode 100644
index 0000000..6e77de1
--- /dev/null
+++ b/extension/chrome/locale/zh-CN/pluginNotFound.dtd
@@ -0,0 +1,6 @@
+<!ENTITY dialog.title               "解雇IE 插件未能加载">
+<!ENTITY pluginNotFound1            "解雇IE 检测到 &quot;Fire IE DLL&quot; 插件未能成功加载。">
+<!ENTITY pluginNotFound2            "您可能安装了错误版本的解雇IE。">
+<!ENTITY correctVersion             "根据您的配置，您应该使用[bit]位版本。">
+<!ENTITY homepage                   "http://fireie.org/zh-CN">
+<!ENTITY visitHomepage              "请至 [link][host][/link] 下载安装。">
diff --git a/extension/chrome/locale/zh-TW/fireie.dtd b/extension/chrome/locale/zh-TW/fireie.dtd
index 76e90c1..c111f91 100644
--- a/extension/chrome/locale/zh-TW/fireie.dtd
+++ b/extension/chrome/locale/zh-TW/fireie.dtd
@@ -1,6 +1,7 @@
 <!ENTITY fireie.switchButton.label "解雇IE">
 
 <!ENTITY fireie.urlbar.switch.tooltip1 "切換瀏覽模式">
+<!ENTITY fireie.urlbar.switch.tooltip1.disabled "無法在該頁面進行切換">
 <!ENTITY fireie.urlbar.switch.tooltip3 "右鍵點擊設定 解雇IE 選項">
 <!ENTITY urlbar.switchRules.label "切換規則">
 <!ENTITY internetProperties.lable "IE的Internet 選項">
diff --git a/extension/chrome/locale/zh-TW/pluginNotFound.dtd b/extension/chrome/locale/zh-TW/pluginNotFound.dtd
new file mode 100644
index 0000000..a704ebf
--- /dev/null
+++ b/extension/chrome/locale/zh-TW/pluginNotFound.dtd
@@ -0,0 +1,6 @@
+<!ENTITY dialog.title               "解雇IE 外掛程式未能載入">
+<!ENTITY pluginNotFound1            "解雇IE 檢測到 &quot;Fire IE DLL&quot; 外掛程式未能成功載入。">
+<!ENTITY pluginNotFound2            "您可能安裝了錯誤版本的解雇IE。">
+<!ENTITY correctVersion             "根據您的配置，您應該使用[bit]位版本。">
+<!ENTITY homepage                   "http://fireie.org/zh-CN">
+<!ENTITY visitHomepage              "請至 [link][host][/link] 下載安裝。">
diff --git a/extension/chrome/skin/container.css b/extension/chrome/skin/container.css
index 8c3114b..114d822 100644
--- a/extension/chrome/skin/container.css
+++ b/extension/chrome/skin/container.css
@@ -18,6 +18,7 @@ body {
 
   position: absolute;
   -moz-box-sizing: border-box;
+  box-sizing: border-box;
   left: 0;
   bottom: 0;
   width: 50%;
@@ -31,6 +32,7 @@ body {
   text-overflow: ellipsis;
 
   -moz-user-select: none;
+  user-select: none;
   cursor: default;
   z-index: 10000;
 }
@@ -42,3 +44,7 @@ body {
   right: 0;
 }
 
+#xp-status-bar.noprevent {
+  width: auto;
+  max-width: 50%;
+}
diff --git a/extension/chrome/skin/fireie.css b/extension/chrome/skin/fireie.css
index 7bf7c05..24d04c3 100644
--- a/extension/chrome/skin/fireie.css
+++ b/extension/chrome/skin/fireie.css
@@ -12,6 +12,26 @@
   padding-bottom: 1px;
 }
 
+#fireie-urlbar-switch[disabled="true"] #fireie-urlbar-switch-image {
+  opacity: 0.4;
+}
+
+#fireie-urlbar-switch[disabled="true"] #fireie-urlbar-switch-label {
+  text-decoration: line-through;
+}
+
+#fireie-urlbar-switch-tooltip1-disabled {
+  display: none;
+}
+
+#fireie-urlbar-switch[disabled="true"] #fireie-urlbar-switch-tooltip1 {
+  display: none;
+}
+
+#fireie-urlbar-switch[disabled="true"] #fireie-urlbar-switch-tooltip1-disabled {
+  display: inline;
+}
+
 /* treechildren checkbox */
 
 treechildren::-moz-tree-checkbox {
diff --git a/extension/install.rdf b/extension/install.rdf
index adcaa5a..fdcea6b 100644
--- a/extension/install.rdf
+++ b/extension/install.rdf
@@ -5,7 +5,7 @@
 
    <em:id>fireie@fireie.org</em:id>
    <em:name>Fire IE</em:name>
-   <em:version>0.2.8</em:version>
+   <em:version>0.2.9</em:version>
    <em:description>Switch to IE engine in one click and give up your Internet Explorer.</em:description>
    <em:creator>Yuan Xulei</em:creator>
    <em:contributor>Wei Deng</em:contributor>
@@ -21,7 +21,7 @@
      <Description>
        <em:id>{ec8030f7-c20a-464f-9b0e-13a3a9e97384}</em:id>
        <em:minVersion>4.0</em:minVersion>
-       <em:maxVersion>17.0a1</em:maxVersion>
+       <em:maxVersion>18.0a1</em:maxVersion>
      </Description>
    </em:targetApplication>
    
diff --git a/extension/modules/AppIntegration.jsm b/extension/modules/AppIntegration.jsm
index f462cab..2aed7e0 100644
--- a/extension/modules/AppIntegration.jsm
+++ b/extension/modules/AppIntegration.jsm
@@ -43,7 +43,7 @@ Cu.import(baseURL.spec + "SubscriptionClasses.jsm");
 Cu.import(baseURL.spec + "Synchronizer.jsm");
 Cu.import(baseURL.spec + "LightweightTheme.jsm");
 Cu.import(baseURL.spec + "EasyRuleCreator.jsm");
-Cu.import(baseURL.spec + "IECookieManager.jsm");
+Cu.import(baseURL.spec + "UtilsPluginManager.jsm");
 
 /**
  * Wrappers for tracked application windows.
@@ -157,10 +157,7 @@ let AppIntegration = {
    */
   getAnyUtilsPlugin: function()
   {
-    if (wrappers.length == 0)
-      return null;
-
-    return wrappers[0].getUtilsPlugin();
+    return UtilsPluginManager.getPlugin();
   },
 
   /**
@@ -179,6 +176,24 @@ let AppIntegration = {
       }
     }
     return false;
+  },
+
+  /**
+   * Determines whether we should prevent status messages from causing pages to flash
+   */
+  shouldPreventStatusFlash: function()
+  {
+    let plugin = this.getAnyUtilsPlugin();
+    if (plugin)
+    {
+      let ret = plugin.ShouldPreventStatusFlash;
+      if (typeof(ret) != "undefined") // in case utility plugin not fully loaded yet
+      {
+        this.shouldPreventStatusFlash = function() ret;
+        return ret;
+      }
+    }
+    return false;
   }
 };
 
@@ -244,14 +259,33 @@ WindowWrapper.prototype = {
    * @type Boolean
    */
   isUpdating: false,
-
+  
   /**
-   * Whether the utils plugin is initialized
-   *
+   * Whether the UI is scheduled to update at a later time.
+   * This is to prevent too frequent updates eating up CPU time.
+   * @type Boolean
    */
-  isPluginInitialized: false,
+  hasScheduledUpdate: false,
   
   /**
+   * Whether we are in delayed update period.
+   * This is to prevent too frequent updates eating up CPU time.
+   * @type Boolean
+   */
+  isDelayingUpdate: false,
+  
+  /**
+   * Timeout of the delay
+   * @type Integer
+   */
+  DELAY_TIMEOUT: 100,
+  
+  /**
+   * Reference to the progress listener
+   */
+  _progressListener: null,
+
+  /**
    * Binds a function to the object, ensuring that "this" pointer is always set
    * correctly.
    */
@@ -284,7 +318,7 @@ WindowWrapper.prototype = {
 
   init: function()
   {
-    this._installUtilsPlugin();
+    UtilsPluginManager.init();
 
     this._registerEventListeners();
 
@@ -292,45 +326,6 @@ WindowWrapper.prototype = {
   },
 
   /**
-   * Install the plugin used to do utility things like sync cookie
-   */
-  _installUtilsPlugin: function()
-  {
-    // Change the default cookie and cache directories of the IE, which will
-    // be restored when the utils plugin is loaded.
-    IECookieManager.changeIETempDirectorySetting();
-
-    // Workaround for #35: Re-apply focus if URL is focused when utils plugin finishes initialization
-    this.window.addEventListener("IEUtilsPluginInitialized", this._bindMethod(function(e)
-    {
-      if (!this._checkUtilsEventOrigin(e)) return;
-      
-      let focused = this.window.document.commandDispatcher.focusedElement;
-      while (focused)
-      {
-        if (focused === this.window.gURLBar)
-        {
-          this.window.gURLBar.blur();
-          this.window.gURLBar.focus();
-          break;
-        }
-        focused = focused.parentNode;
-      }
-      this.isPluginInitialized = true;
-    }), false);
-
-    let doc = this.window.document;
-    let embed = doc.createElementNS("http://www.w3.org/1999/xhtml", "html:embed");
-    embed.hidden = true;
-    embed.setAttribute("id", Utils.utilsPluginId);
-    embed.setAttribute("type", "application/fireie");
-    embed.style.visibility = "collapse";
-    let mainWindow = this.E("main-window");
-    mainWindow.appendChild(embed);
-  },
-
-
-  /**
    * Sets up URL bar button
    */
   _setupUrlBarButton: function()
@@ -345,6 +340,10 @@ WindowWrapper.prototype = {
    */
   _registerEventListeners: function( /**Boolean*/ addProgressListener)
   {
+    // Must keep a reference to the progress listener!
+    this._progressListener = new ProgressListener(this);
+    this.window.gBrowser.addProgressListener(this._progressListener);
+    
     this.window.addEventListener("unload", removeWindow, false);
 
     this.window.addEventListener("DOMContentLoaded", this._bindMethod(this._onPageShowOrLoad), false);
@@ -359,8 +358,6 @@ WindowWrapper.prototype = {
     // Listen to plugin events
     this.window.addEventListener("IEProgressChanged", this._bindMethod(this._onIEProgressChange), false);
     this.window.addEventListener("IENewTab", this._bindMethod(this._onIENewTab), false);
-    this.window.addEventListener("IEUserAgentReceived", this._bindMethod(this._onIEUserAgentReceived), false);
-    this.window.addEventListener("IESetCookie", this._bindMethod(this._onIESetCookie), false);
     this.window.addEventListener("IESetSecureLockIcon", this._bindMethod(this._onIESetSecureLockIcon), false);
     this.window.addEventListener("IEStatusChanged", this._bindMethod(this._onIEStatusChanged), false);
 
@@ -369,7 +366,7 @@ WindowWrapper.prototype = {
     this.window.document.addEventListener("PreviewBrowserTheme", this._bindMethod(this._onPreviewTheme), false, true);
     this.window.document.addEventListener("ResetBrowserThemePreview", this._bindMethod(this._onResetThemePreview), false, true);
   },
-  
+ 
   // security check, do not let malicious sites send fake events
   _checkEventOrigin: function(event)
   {
@@ -381,16 +378,18 @@ WindowWrapper.prototype = {
     if (!allow) Utils.LOG("Blocked content event: " + event.type);
     return allow;
   },
-
-  _checkUtilsEventOrigin: function(event)
+  
+  /**
+   * Run the delayed update UI action if there's any
+   */
+  _delayUpdateInterface: function()
   {
-    let target = event.target;
-    if (!target) return false;
-    let doc = target.ownerDocument;
-    if (!doc) return false;
-    let allow = doc.location.href == Utils.browserUrl;
-    if (!allow) Utils.LOG("Blocked utils event: " + event.type);
-    return allow;
+    this.isDelayingUpdate = false;
+    if (this.hasScheduledUpdate)
+    {
+      this.hasScheduledUpdate = false;
+      this._updateInterfaceCore();
+    }
   },
 
   /**
@@ -399,10 +398,15 @@ WindowWrapper.prototype = {
   updateInterface: function() { this._updateInterface(); },
   _updateInterface: function()
   {
-    if (this.isUpdating)
-    {
+    if (this.isUpdating || this.hasScheduledUpdate)
       return;
-    }
+
+    this.hasScheduledUpdate = true;
+    if (!this.isDelayingUpdate)
+      Utils.runAsync(this._delayUpdateInterface, this);
+  },
+  _updateInterfaceCore: function()
+  {
     try
     {
       this.isUpdating = true;
@@ -422,12 +426,14 @@ WindowWrapper.prototype = {
       this._updateObjectDisabledStatus("Browser:Stop", pluginObject ? pluginObject.CanStop : isLoading);
 
       // Update the content of the URL bar.
-      if (this.window.gURLBar && this.isIEEngine())
+      if (this.window.gURLBar && isIEEngine)
       {
         if (!this.window.gBrowser.userTypedValue)
         {
           if (url == "about:blank") url = "";
-          if (this.window.gURLBar.value != url) this.window.gURLBar.value = url;
+          if (this.window.gURLBar.value != url) {
+            this.window.gURLBar.value = url;
+          }
         }
       }
 
@@ -485,6 +491,9 @@ WindowWrapper.prototype = {
     finally
     {
       this.isUpdating = false;
+      this.isDelayingUpdate = true;
+      this.hasScheduledUpdate = false;
+      this.window.setTimeout(this._bindMethod(this._delayUpdateInterface), this.DELAY_TIMEOUT);
     }
   },
 
@@ -577,25 +586,21 @@ WindowWrapper.prototype = {
     let aBrowser = (aTab ? aTab.linkedBrowser : this.window.gBrowser);
     if (aBrowser && aBrowser.currentURI && Utils.startsWith(aBrowser.currentURI.spec, Utils.containerUrl))
     {
-      if (aBrowser.contentDocument)
-      {
-        let obj = aBrowser.contentDocument.getElementById(Utils.containerPluginId);
-        if (obj)
-        {
-          return (obj.wrappedJSObject ? obj.wrappedJSObject : obj); // Ref: Safely accessing content DOM from chrome
-        }
-      }
+      return this.getContainerPluginFromBrowser(aBrowser);
     }
     return null;
   },
-
-  /** Get the IE utility plugin object */
-  getUtilsPlugin: function()
+  
+  /** Get the IE engine plugin object */
+  getContainerPluginFromBrowser: function(aBrowser)
   {
-    let obj = this.E(Utils.utilsPluginId);
-    if (obj)
+    if (aBrowser.contentDocument)
     {
-      return (obj.wrappedJSObject ? obj.wrappedJSObject : obj);
+      let obj = aBrowser.contentDocument.getElementById(Utils.containerPluginId);
+      if (obj)
+      {
+        return (obj.wrappedJSObject ? obj.wrappedJSObject : obj); // Ref: Safely accessing content DOM from chrome
+      }
     }
     return null;
   },
@@ -869,9 +874,10 @@ WindowWrapper.prototype = {
     {
       if (Utils.isValidUrl(url) || Utils.isValidDomainName(url))
       {
-        let isBlank = (Utils.fromContainerUrl(this.window.gBrowser.currentURI.spec) == "about:blank");
+        let originalURL = this.getURL();
+        let isBlank = (originalURL == "about:blank");
         let handleUrlBar = Prefs.handleUrlBar;
-        let isSimilar = Utils.getHostname(this.getURL()) == Utils.getHostname(url);
+        let isSimilar = Utils.getHostname(originalURL) == Utils.getHostname(url);
         if (isBlank || handleUrlBar || isSimilar) return Utils.toContainerUrl(url);
       }
     }
@@ -935,30 +941,6 @@ WindowWrapper.prototype = {
     Utils.setTabAttributeJSON(newTab, "fireieNavigateParams", param);
   },
 
-  /** Handler for receiving IE UserAgent from the plugin object */
-  _onIEUserAgentReceived: function(event)
-  {
-    if (!this._checkUtilsEventOrigin(event)) return;
-    
-    let userAgent = event.detail;
-    Utils.ieUserAgent = userAgent;
-    Utils.LOG("_onIEUserAgentReceived: " + userAgent);
-    this._restoreIETempDirectorySetting();
-  },
-
-  /**
-   * Handles 'IESetCookie' event receiving from the plugin
-   */
-  _onIESetCookie: function(event)
-  {
-    if (!this._checkUtilsEventOrigin(event)) return;
-    
-    let subject = null;
-    let topic = "fireie-set-cookie";
-    let data = event.detail;
-    Services.obs.notifyObservers(subject, topic, data);
-  },
-
   _onIESetSecureLockIcon: function(event)
   {
     this.checkIdentity();
@@ -1056,6 +1038,7 @@ WindowWrapper.prototype = {
         let event = this.window.gBrowser.contentDocument.createEvent("DataContainerEvent");
         event.initEvent("SetStatusText", false, false);
         event.setData("statusText", pluginObject.StatusText);
+        event.setData("preventFlash", AppIntegration.shouldPreventStatusFlash());
         statusBar.dispatchEvent(event);
       }
       else if (!statusBar.hidden && !Prefs.showStatusText)
@@ -1064,6 +1047,7 @@ WindowWrapper.prototype = {
         let event = this.window.gBrowser.contentDocument.createEvent("DataContainerEvent");
         event.initEvent("SetStatusText", false, false);
         event.setData("statusText", "");
+        event.setData("preventFlash", AppIntegration.shouldPreventStatusFlash());
         statusBar.dispatchEvent(event);
       }
     }
@@ -1204,11 +1188,6 @@ WindowWrapper.prototype = {
     this._updateInterface();
   },
 
-  _restoreIETempDirectorySetting: function()
-  {
-    IECookieManager.retoreIETempDirectorySetting();
-  },
-  
   // whether we should handle textbox commands, e.g. cmd_paste
   _shouldHandleTextboxCommand: function()
   {
@@ -1456,10 +1435,7 @@ WindowWrapper.prototype = {
         return true;
       }
     },
-    function()
-    {
-      this.window.setTimeout(this._bindMethod(this._updateInterface), 0);
-    });
+    this._updateInterface);
     return this[funcName](cmd);
   },
 
@@ -1494,10 +1470,7 @@ WindowWrapper.prototype = {
         return true;
       }
     },
-    function()
-    {
-      this.window.setTimeout(this._bindMethod(this._updateInterface), 0);
-    });
+    this._updateInterface);
     return this[funcName](cmd);
   },
   /* MouseGesturesRedox commands */
@@ -1531,10 +1504,7 @@ WindowWrapper.prototype = {
         return true;
       }
     },
-    function()
-    {
-      this.window.setTimeout(this._bindMethod(this._updateInterface), 0);
-    });
+    this._updateInterface);
     return this[funcName](cmd);
   },
   /* All-in-One Gestrues commands */
@@ -1575,7 +1545,7 @@ WindowWrapper.prototype = {
       Utils.ERROR("goDoAiOGCommand(" + cmd + "): " + ex);
       return false;
     }
-    this.window.setTimeout(this._bindMethod(this._updateInterface), 0);
+    this._updateInterface();
     return true;
   },
   /* called when original findbar issues a find */
@@ -1826,18 +1796,7 @@ WindowWrapper.prototype = {
   },
   fireAfterInit: function(callback, self, arguments)
   {
-    if (this.isPluginInitialized)
-    {
-      callback.apply(self, arguments);
-    }
-    else
-    {
-      this.window.addEventListener("IEUtilsPluginInitialized", this._bindMethod(function(e)
-      {
-        if (!this._checkUtilsEventOrigin(e)) return;
-        callback.apply(self, arguments);
-      }), false);
-    }
+    UtilsPluginManager.fireAfterInit(callback, self, arguments);
   },
   // Handler for click event on engine switch button
   clickSwitchButton: function(e)
@@ -1979,9 +1938,11 @@ WindowWrapper.prototype = {
    */
   openReportDialog: function()
   {
+  /* TODO: Implement our own
     let wnd = Services.wm.getMostRecentWindow("abp:sendReport");
     if (wnd) wnd.focus();
     else this.window.openDialog("chrome://adblockplus/content/ui/sendReport.xul", "_blank", "chrome,centerscreen,resizable=no", this.window.content, this.getCurrentLocation());
+    */
   },
 
   /**
@@ -2046,7 +2007,7 @@ function addSubscription()
     }
     else
     {
-      Services.ww.openWindow(wrapper ? wrapper.window : null, "chrome://fireie/content/firstRun.xul", "_blank", "chrome,centerscreen,resizable,dialog=no", null);
+      Services.ww.openWindow(wrapper ? wrapper.window : null, "chrome://fireie/content/firstRun.xul", "_blank", "chrome,centerscreen,dialog", null);
     }
   }
 
@@ -2079,7 +2040,39 @@ function refreshRuleCache()
 {
   Rule.fromText("!dummy"); // work against trapProperty
   RuleStorage.loadFromDisk();
-  RuleNotifier.triggerListeners("save");
+  RuleStorage.saveToDisk();
+}
+
+/**
+ * nsIWebProgressListener implementation
+ * @constructor
+ */
+function ProgressListener(windowWrapper) {
+  this.windowWrapper = windowWrapper;
+}
+
+ProgressListener.prototype = {
+
+  windowWrapper: null,
+
+  QueryInterface: function(aIID)
+  {
+   if (aIID.equals(Ci.nsIWebProgressListener) ||
+       aIID.equals(Ci.nsISupportsWeakReference) ||
+       aIID.equals(Ci.nsISupports))
+     return this;
+   throw Cr.NS_NOINTERFACE;
+  },
+ 
+  onStateChange: function(aWebProgress, aRequest, aFlag, aStatus) {}, 
+  onProgressChange: function(aWebProgress, aRequest, curSelf, maxSelf, curTot, maxTot) { },
+  onStatusChange: function(aWebProgress, aRequest, aStatus, aMessage) { },
+  onSecurityChange: function(aWebProgress, aRequest, aState) { },
+
+  onLocationChange: function(aProgress, aRequest, aURI)
+  {
+    this.windowWrapper.updateInterface();
+  }
 }
 
 init();
diff --git a/extension/modules/HookManager.jsm b/extension/modules/HookManager.jsm
index 9afe2f3..8bb4f5a 100644
--- a/extension/modules/HookManager.jsm
+++ b/extension/modules/HookManager.jsm
@@ -195,6 +195,20 @@ HookManager.prototype = {
     }
   },
   
+  _wrapFunction: function(orgFunc, myFuncHead, myFuncTail, funcName)
+  {
+    if (myFuncHead)
+    {
+      if (myFuncTail) return this._wrapFunctionHeadTail(orgFunc, myFuncHead, myFuncTail, funcName);
+      else return this._wrapFunctionHead(orgFunc, myFuncHead, funcName);
+    }
+    else
+    {
+      if (myFuncTail) return this._wrapFunctionTail(orgFunc, myFuncTail, funcName);
+      else return orgFunc;
+    }
+  },
+  
   _getOriginalFunc: function(func)
   {
     let idx = func.FireIE_orgFuncIdx;
@@ -401,22 +415,24 @@ HookManager.prototype = {
   },
   
   /**
-   * Add some code at the beginning of Property's getter and setter
-   * This one uses wrapFunctionHead,
+   * Add some code at the beginning/end of Property's getter and setter
+   * This one uses _wrapFunction,
    * which is safe to preserve original getter/setter's closure
    * @param parentNode - the node whose property is to be hooked
    * @param propName - the name of the property to hook
-   * @param myGetter - the function to be called at the beginning of the getter
-   * @param mySetter - the function to be called at the beginning of the setter
+   * @param myGetterBegin - the function to be called at the beginning of the getter
+   * @param mySetterBegin - the function to be called at the beginning of the setter
+   * @param myGetterEnd - the function to be called at the end of the getter
+   * @param mySetterEnd - the function to be called at the end of the setter
    */
-  hookProp: function(parentNode, propName, myGetter, mySetter)
+  hookProp: function(parentNode, propName, myGetterBegin, mySetterBegin, myGetterEnd, mySetterEnd)
   {
     // must set both getter and setter or the other will be missing
     let oGetter = parentNode.__lookupGetter__(propName);
     let oSetter = parentNode.__lookupSetter__(propName);
-    if (oGetter && myGetter)
+    if (oGetter && (myGetterBegin || myGetterEnd))
     {
-      let newGetter = this._wrapFunctionHead(oGetter, myGetter, parentNode.toString() + ".get " + propName);
+      let newGetter = this._wrapFunction(oGetter, myGetterBegin, myGetterEnd, parentNode.toString() + ".get " + propName);
       try
       {
         parentNode.__defineGetter__(propName, newGetter);
@@ -430,9 +446,9 @@ HookManager.prototype = {
     {
       parentNode.__defineGetter__(propName, oGetter);
     }
-    if (oSetter && mySetter)
+    if (oSetter && (mySetterBegin || mySetterEnd))
     {
-      let newSetter = this._wrapFunctionHead(oSetter, mySetter, parentNode.toString() + ".set " + propName);
+      let newSetter = this._wrapFunction(oSetter, mySetterBegin, mySetterEnd, parentNode.toString() + ".set " + propName);
       try
       {
         parentNode.__defineSetter__(propName, newSetter);
diff --git a/extension/modules/Public.jsm b/extension/modules/Public.jsm
index eccda87..bf440a6 100644
--- a/extension/modules/Public.jsm
+++ b/extension/modules/Public.jsm
@@ -5,10 +5,10 @@
  */
 
 /**
- * @fileOverview Public Adblock Plus API.
+ * @fileOverview Public Fire-IE API.
  */
 
-var EXPORTED_SYMBOLS = ["AdblockPlus"];
+var EXPORTED_SYMBOLS = ["FireIEPublic"];
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
@@ -25,10 +25,10 @@ Cu.import(baseURL.spec + "SubscriptionClasses.jsm");
 const externalPrefix = "~external~";
 
 /**
- * Class implementing public Adblock Plus API
+ * Class implementing public Fire-IE API
  * @class
  */
-var AdblockPlus = {
+var FireIEPublic = {
   /**
    * Returns current subscription count
    * @type Integer
@@ -41,7 +41,7 @@ var AdblockPlus = {
   /**
    * Gets a subscription by its URL
    */
-  getSubscription: function( /**String*/ id) /**IAdblockPlusSubscription*/
+  getSubscription: function( /**String*/ id) /**IFireIESubscription*/
   {
     if (id in RuleStorage.knownSubscriptions) return createSubscriptionWrapper(RuleStorage.knownSubscriptions[id]);
 
@@ -51,7 +51,7 @@ var AdblockPlus = {
   /**
    * Gets a subscription by its position in the list
    */
-  getSubscriptionAt: function( /**Integer*/ index) /**IAdblockPlusSubscription*/
+  getSubscriptionAt: function( /**Integer*/ index) /**IFireIESubscription*/
   {
     if (index < 0 || index >= RuleStorage.subscriptions.length) return null;
 
@@ -144,9 +144,9 @@ var AdblockPlus = {
 };
 
 /**
- * Wraps a subscription into IAdblockPlusSubscription structure.
+ * Wraps a subscription into IFireIESubscription structure.
  */
-function createSubscriptionWrapper( /**Subscription*/ subscription) /**IAdblockPlusSubscription*/
+function createSubscriptionWrapper( /**Subscription*/ subscription) /**IFireIESubscription*/
 {
   if (!subscription) return null;
 
diff --git a/extension/modules/RuleStorage.jsm b/extension/modules/RuleStorage.jsm
index e1347bf..fd2a0e4 100644
--- a/extension/modules/RuleStorage.jsm
+++ b/extension/modules/RuleStorage.jsm
@@ -387,7 +387,8 @@ var RuleStorage = {
           if (!RuleStorage.subscriptions.length)
           {
             // No rule subscriptions in the file, this isn't right.
-            throw "No data in the file";
+            // Do not throw. It may due to a forced save action when upgrading
+            // throw "No data in the file";
           }
         }
 
diff --git a/extension/modules/Utils.jsm b/extension/modules/Utils.jsm
index ab377ce..d1d02be 100644
--- a/extension/modules/Utils.jsm
+++ b/extension/modules/Utils.jsm
@@ -224,6 +224,11 @@ var Utils = {
   {
     return "chrome://browser/content/browser.xul";
   },
+  
+  get hiddenWindowUrl()
+  {
+    return "resource://gre-resources/hiddenWindow.html";
+  },
 
   /** Converts URL into IE Engine URL */
   toContainerUrl: function(url)
@@ -359,10 +364,21 @@ var Utils = {
     let chromeWin = Services.wm.getMostRecentWindow("navigator:browser");
     return chromeWin;
   },
+  
+  getChromeWindowFrom: function(window)
+  {
+    let mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
+                           .getInterface(Components.interfaces.nsIWebNavigation)
+                           .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
+                           .rootTreeItem
+                           .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
+                           .getInterface(Components.interfaces.nsIDOMWindow); 
+    return mainWindow;
+  },
 
   getTabFromDocument: function(doc)
   {
-    let aBrowser = Utils.getChromeWindow().gBrowser;
+    let aBrowser = Utils.getChromeWindowFrom(doc.defaultView).gBrowser;
     if (!aBrowser.getBrowserIndexForDocument) return null;
     try
     {
@@ -650,7 +666,7 @@ var Utils = {
 
     if (gBrowser)
     {
-      gBrowser.addTab(url);
+      gBrowser.selectedTab = gBrowser.addTab(url);
     }
     else
     {
@@ -797,6 +813,17 @@ var Utils = {
     if (str.length > length)
       str = str.substring(0, length - 3) + "...";
     return str;
+  },
+  /**
+   * Use the hidden window for utils plugin
+   */
+  getHiddenWindow: function()
+  {
+    let hiddenWindow = Cc["@mozilla.org/appshell/appShellService;1"]
+               .getService(Ci.nsIAppShellService)
+               .hiddenDOMWindow;
+    this.getHiddenWindow = function() hiddenWindow;
+    return hiddenWindow;
   }
 };
 
diff --git a/extension/modules/UtilsPluginManager.jsm b/extension/modules/UtilsPluginManager.jsm
new file mode 100644
index 0000000..4577432
--- /dev/null
+++ b/extension/modules/UtilsPluginManager.jsm
@@ -0,0 +1,215 @@
+/*
+This file is part of Fire-IE.
+
+Fire-IE is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Fire-IE is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Fire-IE.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+/**
+ * @fileOverview Manages the utility plugin
+ */
+
+var EXPORTED_SYMBOLS = ["UtilsPluginManager"];
+
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+const Cr = Components.results;
+const Cu = Components.utils;
+
+let baseURL = Cc["@fireie.org/fireie/private;1"].getService(Ci.nsIURI);
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/Services.jsm");
+
+Cu.import(baseURL.spec + "Utils.jsm");
+Cu.import(baseURL.spec + "IECookieManager.jsm");
+
+let UtilsPluginManager = {
+  /**
+   * Whether the utils plugin is initialized
+   */
+  isPluginInitialized: false,
+  
+  /**
+   * Whether init() has been called
+   */
+  _isInitCalled: false,
+  
+  init: function()
+  {
+    if (this._isInitCalled) return;
+    this._isInitCalled = true;
+    
+    this._handleClickToPlay();
+    this._handleLoadFailure();
+    this._install();
+    this._registerHandlers();
+  },
+  
+  uninit: function()
+  {
+    this._unregisterHandlers();
+  },
+  
+  /**
+   * Retrieves the utils plugin object
+   */
+  getPlugin: function()
+  {
+    let doc = Utils.getHiddenWindow().document;
+    let plugin = doc.getElementById(Utils.utilsPluginId);
+    return plugin.wrappedJSObject || plugin;
+  },
+  
+  /**
+   * Ensures that the plugin is initialized before calling the callback
+   */
+  fireAfterInit: function(callback, self, arguments)
+  {
+    if (this.isPluginInitialized)
+    {
+      callback.apply(self, arguments);
+    }
+    else
+    {
+      Utils.getHiddenWindow().addEventListener("IEUtilsPluginInitialized", function(e)
+      {
+        callback.apply(self, arguments);
+      }, false);
+    }
+  },
+
+  /** handle click to play event in the hidden window */
+  _handleClickToPlay: function()
+  {
+    let clickToPlayHandler = function(event)
+    {
+      let plugin = event.target;
+
+      // We're expecting the target to be a plugin.
+      if (!(plugin instanceof Ci.nsIObjectLoadingContent))
+        return;
+        
+      // used to check whether the plugin is already activated
+      let objLoadingContent = plugin.QueryInterface(Ci.nsIObjectLoadingContent);
+      
+      let mimetype = plugin.getAttribute("type");
+      if (mimetype == "application/fireie")
+      {
+        // check the container page
+        let doc = plugin.ownerDocument;
+        let url = doc.location.href;
+        // is it a utils plugin?
+        if (doc.location.href == Utils.hiddenWindowUrl)
+        {
+          // ok, play the utils plugin
+          if (!objLoadingContent.activated)
+          {
+            plugin.playPlugin();
+          }
+          event.stopPropagation();
+        }
+        // let gPluginHandler do the rest of the work
+      }
+    };
+    Utils.getHiddenWindow().addEventListener("PluginClickToPlay", clickToPlayHandler, true);
+  },
+  
+  /** handle the plugin not found event and inform user about that */
+  _handleLoadFailure: function()
+  {
+    let pluginNotFoundHandler = function(event)
+    {
+      let plugin = event.target;
+
+      // We're expecting the target to be a plugin.
+      if (!(plugin instanceof Ci.nsIObjectLoadingContent))
+        return;
+      
+      let mimetype = plugin.getAttribute("type");
+      if (mimetype == "application/fireie")
+      {
+        // check the container page
+        let doc = plugin.ownerDocument;
+        let url = doc.location.href;
+        // is it a utils plugin?
+        if (doc.location.href == Utils.hiddenWindowUrl)
+        {
+          // ok, we have trouble with the plugin now
+          IECookieManager.retoreIETempDirectorySetting();
+          // notify user about that
+          Utils.ERROR("Plugin not found. Possibly due to wrong Fire-IE version.");
+          Services.ww.openWindow(null, "chrome://fireie/content/pluginNotFound.xul",
+            "_blank", "chrome,centerscreen,dialog", null);
+        }
+      }
+    };
+    Utils.getHiddenWindow().addEventListener("PluginNotFound", pluginNotFoundHandler, true);
+  },
+  
+  /**
+   * Install the plugin used to do utility things like sync cookie
+   */
+  _install: function()
+  {
+    // Change the default cookie and cache directories of the IE, which will
+    // be restored when the utils plugin is loaded.
+    IECookieManager.changeIETempDirectorySetting();
+
+    let self = this;
+    Utils.getHiddenWindow().addEventListener("IEUtilsPluginInitialized", function(e)
+    {
+      self.isPluginInitialized = true;
+    }, false);
+
+    let doc = Utils.getHiddenWindow().document;
+    let embed = doc.createElementNS("http://www.w3.org/1999/xhtml", "html:embed");
+    embed.hidden = true;
+    embed.setAttribute("id", Utils.utilsPluginId);
+    embed.setAttribute("type", "application/fireie");
+    embed.style.visibility = "collapse";
+    doc.body.appendChild(embed);
+  },
+  
+  _registerHandlers: function()
+  {
+    Utils.getHiddenWindow().addEventListener("IEUserAgentReceived", onIEUserAgentReceived, false);
+    Utils.getHiddenWindow().addEventListener("IESetCookie", onIESetCookie, false);
+  },
+  
+  _unregisterHandlers: function()
+  {
+    Utils.getHiddenWindow().removeEventListener("IEUserAgentReceived", onIEUserAgentReceived, false);
+    Utils.getHiddenWindow().removeEventListener("IESetCookie", onIESetCookie, false);
+  },
+};
+
+/** Handler for receiving IE UserAgent from the plugin object */
+function onIEUserAgentReceived(event)
+{
+  let userAgent = event.detail;
+  Utils.ieUserAgent = userAgent;
+  Utils.LOG("_onIEUserAgentReceived: " + userAgent);
+  IECookieManager.retoreIETempDirectorySetting();
+}
+
+/**
+ * Handles 'IESetCookie' event receiving from the plugin
+ */
+function onIESetCookie(event)
+{
+  let subject = null;
+  let topic = "fireie-set-cookie";
+  let data = event.detail;
+  Services.obs.notifyObservers(subject, topic, data);
+}
diff --git a/plugin/IEHostWindow.cpp b/plugin/IEHostWindow.cpp
index f2a55a1..264c9e0 100644
--- a/plugin/IEHostWindow.cpp
+++ b/plugin/IEHostWindow.cpp
@@ -138,7 +138,26 @@ void CIEHostWindow::AddUtilsIEWindow(CIEHostWindow *pWnd)
 	s_csUtilsIEWindowMap.Unlock();
 }
 
-void CIEHostWindow::SetFirefoxCookie(CString strURL, CString strCookie)
+Plugin::CPlugin* CIEHostWindow::GetAnyUtilsPlugin()
+{
+	CIEHostWindow* pWindow = GetAnyUtilsWindow();
+	if (pWindow)
+		return pWindow->m_pPlugin;
+	return NULL;
+}
+
+CIEHostWindow* CIEHostWindow::GetAnyUtilsWindow()
+{
+	CIEHostWindow* pWindow = NULL;
+	HWND hwnd = GetAnyUtilsHWND();
+	if (hwnd)
+	{
+		pWindow = reinterpret_cast<CIEHostWindow* >(::GetWindowLongPtrA(hwnd, GWLP_USERDATA));
+	}
+	return pWindow;
+}
+
+HWND CIEHostWindow::GetAnyUtilsHWND()
 {
 	HWND hwnd = NULL;
 	s_csUtilsIEWindowMap.Lock();
@@ -147,6 +166,12 @@ void CIEHostWindow::SetFirefoxCookie(CString strURL, CString strCookie)
 		hwnd = s_UtilsIEWindowMap.GetValueAt(0)->GetSafeHwnd();
 	}
 	s_csUtilsIEWindowMap.Unlock();
+	return hwnd;
+}
+
+void CIEHostWindow::SetFirefoxCookie(CString strURL, CString strCookie)
+{
+	HWND hwnd = GetAnyUtilsHWND();
 	if (hwnd)
 	{
 		SetFirefoxCookieParams params = {strURL, strCookie};
@@ -1356,6 +1381,13 @@ BOOL CIEHostWindow::ShouldShowStatusOurselves()
 	return false;
 }
 
+BOOL CIEHostWindow::ShouldPreventStatusFlash()
+{
+	if (m_pPlugin)
+		return (BOOL)(m_pPlugin->ShouldPreventStatusFlash());
+	return false;
+}
+
 BOOL CIEHostWindow::DestroyWindow()
 {
 	UninitIE();
diff --git a/plugin/IEHostWindow.h b/plugin/IEHostWindow.h
index 7ce0201..1ba5cad 100644
--- a/plugin/IEHostWindow.h
+++ b/plugin/IEHostWindow.h
@@ -86,6 +86,9 @@ public:
 
 	static void SetFirefoxCookie(CString strURL, CString strCookie);
 
+	static HWND GetAnyUtilsHWND();
+	static CIEHostWindow* GetAnyUtilsWindow();
+	static Plugin::CPlugin* GetAnyUtilsPlugin();
 	/** 
 	 * Get the UserAgent of the IE control.
 	 * As the IE control provides no explicit interface for querying the UserAgent, we have to parse it from the HTML document.
@@ -255,6 +258,7 @@ public:
 	CString GetSecureLockInfo();
 	CString GetStatusText();
 	BOOL ShouldShowStatusOurselves();
+	BOOL ShouldPreventStatusFlash();
 
 	// plugin events
 	void OnTitleChanged(const CString& title);
diff --git a/plugin/Plugin/ScriptablePluginObject.cpp b/plugin/Plugin/ScriptablePluginObject.cpp
index 0ce6230..8b3eb01 100644
--- a/plugin/Plugin/ScriptablePluginObject.cpp
+++ b/plugin/Plugin/ScriptablePluginObject.cpp
@@ -170,6 +170,13 @@ namespace Plugin
 			BOOLEAN_TO_NPVARIANT(value, *result);
 			return true;
 		}
+		// readonly property {bool} ShouldPreventStatusFlash
+		else if (name == NPI_ID(ShouldPreventStatusFlash))
+		{
+			BOOL value = pMainWindow->ShouldPreventStatusFlash();
+			BOOLEAN_TO_NPVARIANT(value, *result);
+			return true;
+		}
 
 		VOID_TO_NPVARIANT(*result);
 		return true;
diff --git a/plugin/Plugin/ScriptablePluginObject.h b/plugin/Plugin/ScriptablePluginObject.h
index aff966b..4c5e583 100644
--- a/plugin/Plugin/ScriptablePluginObject.h
+++ b/plugin/Plugin/ScriptablePluginObject.h
@@ -99,6 +99,7 @@ namespace Plugin
 		NPI_DEF(FBLastFindStatus);
 		NPI_DEF(StatusText);
 		NPI_DEF(ShouldShowStatusOurselves);
+		NPI_DEF(ShouldPreventStatusFlash);
 
 	public:
 		ScriptablePluginObject(NPP npp)
@@ -165,6 +166,7 @@ namespace Plugin
 			NPN_GSI_P(FBLastFindStatus);
 			NPN_GSI_P(StatusText);
 			NPN_GSI_P(ShouldShowStatusOurselves);
+			NPN_GSI_P(ShouldPreventStatusFlash);
 		}
 
 		virtual bool HasMethod(NPIdentifier name);
diff --git a/plugin/Plugin/plugin.cpp b/plugin/Plugin/plugin.cpp
index f03a342..5717afd 100644
--- a/plugin/Plugin/plugin.cpp
+++ b/plugin/Plugin/plugin.cpp
@@ -130,7 +130,7 @@ namespace Plugin
 		{
 			CString strHostUrl = GetHostURL();
 
-			// Secrity check. Do not allow pages other than the browser window to load the utils plugin.
+			// Secrity check. Do not allow pages other than the hidden window to load the utils plugin.
 			if (strHostUrl != RES_UTILS_URL_T)
 				return FALSE;
 		}
@@ -239,6 +239,12 @@ namespace Plugin
 
 	bool CPlugin::ShouldShowStatusOurselves()
 	{
+		// handle all status text ourselves
+		return true;
+	}
+
+	bool CPlugin::ShouldPreventStatusFlash()
+	{
 		//// return true; // for debugging under win7
 		//return Utils::OS::GetVersion() == Utils::OS::WINXP
 		//	|| Utils::OS::GetVersion() == Utils::OS::WIN2003;
diff --git a/plugin/Plugin/plugin.h b/plugin/Plugin/plugin.h
index 990c1dc..5418b54 100644
--- a/plugin/Plugin/plugin.h
+++ b/plugin/Plugin/plugin.h
@@ -110,11 +110,14 @@ namespace Plugin
 
 		/**
 		 * Whether we should show status ourselves, i.e. not through NPN_Status
-		 * This is mainly due to the rendering bug in XP/2003 that makes pages flash
-		 * when rapidly rendering the status text
 		 */
 		bool ShouldShowStatusOurselves();
-
+		/**
+		 * Whether we should prevent flashing caused by setting status text
+		 * This is mainly due to the rendering bug in IE8 or lower that makes pages flash
+		 * when rapidly rendering the status text
+		 */
+		bool ShouldPreventStatusFlash();
 		/**
 		 * Sets Firefox Cookie by firing a JavaScript event.
 		 */
diff --git a/plugin/resource.h b/plugin/resource.h
index 53e5d08..f2586db 100644
--- a/plugin/resource.h
+++ b/plugin/resource.h
@@ -12,7 +12,7 @@
 #define RES_OBJECTNAME_T _T("fireie-object")
 #define RES_CHROME_PREFIX_T _T("chrome://fireie/content/container.xhtml?url=")
 #define RES_UTILS_OBJECT_T _T("fireie-utils-object")
-#define RES_UTILS_URL_T _T("chrome://browser/content/browser.xul")
+#define RES_UTILS_URL_T _T("resource://gre-resources/hiddenWindow.html")
 #define RES_CONTAINER "FireIEContainer"
 
 #if defined _M_X64
