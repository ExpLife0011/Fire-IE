#include "stdafx.h"
#include "Cookie.h"
//
// HTTPCookie.cpp
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// Contributor(s):
//    Yuan Xulei(hi@yxl.name)
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "Poco/Timestamp.h"
#include "Poco/DateTime.h"
#include "Poco/DateTimeParser.h"
#include "Poco/URI.h"
#include "Poco/NumberParser.h"

using Poco::Timestamp;
using Poco::DateTime;
using Poco::DateTimeParser;
using Poco::URI;
using Poco::NumberParser;

namespace Cookie
{
	Cookie::Cookie(const CString& url, const CString& header):HTTPCookie()
	{
		USES_CONVERSION;

		CString name;
		CString value;
		int len = header.GetLength();
		int pos = 0;
		while (pos != -1 && pos < len)
		{
			pos = findNameValuePair(header, pos, name, value) + 1;

			if (name.CompareNoCase(_T("domain")) == 0)
			{
				setDomain(T2A(value));
			}
			else if (name.CompareNoCase(_T("path")) == 0)
			{
				setPath(T2A(value));
			}
			else if (name.CompareNoCase(_T("max-age")) == 0)
			{
				setMaxAge(NumberParser::parse(T2A(value)));
			}
			else if (name.CompareNoCase(_T("secure")) == 0)
			{
				setSecure(true);
			}
			else if (name.CompareNoCase(_T("expires")) == 0)
			{
				int tzd;
				DateTime exp = DateTimeParser::parse(T2A(value), tzd);
				Timestamp now;
				setMaxAge((int) ((exp.timestamp() - now)/Timestamp::resolution()));
			}
			else if (name.CompareNoCase(_T("HttpOnly")) == 0)
			{
				setHttpOnly(true);
			}
			else
			{
				setName(T2A(name));
				setValue(T2A(value));
			}
		}

		// Get cookie domain from the url
		if (getDomain().empty())
		{
			URI uri(T2A(url));
			setDomain(uri.getHost());
		}
	}

	/**
	 * Finds the paire of "name=value;"in a cookie header string from a specified position
	 */
	int Cookie::findNameValuePair(const CString& header, int start, CString& name, CString& value)
	{
		int len = header.GetLength();
		if (start >= len)
		{
			return -1;
		}
		int separate = header.Find(_T("="), start);
		int terminate = header.Find(_T(";"), start);
		if (terminate == -1)
		{
			terminate = header.GetLength();
		}
		if (separate == -1 || separate > terminate)
		{
			separate = terminate;
		}
		name = header.Mid(start, separate - start).Trim();
		int valueLength = terminate - separate - 1;
		if (valueLength > 0)
		{
			value = header.Mid(separate + 1, terminate - separate - 1).Trim();
		}
		else
		{
			value.Empty();
		}
		return terminate;
	}

} // namespace Cookie
